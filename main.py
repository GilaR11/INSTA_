import asyncio
import logging
from pathlib import Path
import io
from typing import Optional
import aiohttp

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BufferedInputFile,
)
from instagrapi import Client
from instagrapi.exceptions import (
    ChallengeRequired, BadPassword, UnknownError
)
from requests.exceptions import ProxyError, ConnectionError, ReadTimeout, RequestException
from dotenv import load_dotenv
import os

from db import init_db, add_account, get_folders, add_folder, get_accounts, get_account_by_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
Path("sessions").mkdir(exist_ok=True)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AppStates(StatesGroup):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    choosing_folder_for_single = State()
    choosing_folder_for_bulk = State()
    creating_new_folder_for_single = State()
    creating_new_folder_for_bulk = State()
    waiting_for_single_details = State()
    waiting_for_single_proxy = State()
    waiting_for_account_file = State()
    waiting_for_proxy_file = State()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    choosing_account_to_delete = State()
    confirming_delete = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
keyboard_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã"), KeyboardButton(text="–ü–∞–ø–∫–∏")],
        [KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∏"), KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ–≤")],
    ],
    resize_keyboard=True,
)

keyboard_accounts = ReplyKeyboardMarkup(
        keyboard=[
        [KeyboardButton(text="–û–¥–∏–Ω–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboard_main)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard_main)

# --- –†–∞–∑–¥–µ–ª "–ê–∫–∫–∞—É–Ω—Ç—ã" ---
@dp.message(F.text == "–ê–∫–∫–∞—É–Ω—Ç—ã")
async def handle_accounts(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_accounts)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def show_folder_selection(message: Message, state: FSMContext, next_state: State):
    folders = await get_folders()
    buttons = [[KeyboardButton(text=f"üìÅ {f['name']}")] for f in folders]
    buttons.append([KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É")])
    buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤")])
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await state.update_data(next_state=next_state.state)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=keyboard)

async def process_new_folder_creation(message: Message, state: FSMContext, next_state_on_success: State):
    folder_name = message.text
    if not folder_name or folder_name == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏
        current_state = await state.get_state()
        if current_state == AppStates.creating_new_folder_for_single.state:
            await state.set_state(AppStates.choosing_folder_for_single)
            await show_folder_selection(message, state, AppStates.waiting_for_single_details)
        elif current_state == AppStates.creating_new_folder_for_bulk.state:
            await state.set_state(AppStates.choosing_folder_for_bulk)
            await show_folder_selection(message, state, AppStates.waiting_for_account_file)
        return
        
    folder_id = await add_folder(folder_name)
    if folder_id:
        await state.update_data(folder_id=folder_id)
        await state.set_state(next_state_on_success)
        if next_state_on_success == AppStates.waiting_for_single_details:
            await message.answer(f"–ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n`login:password:email:email_password`", parse_mode="Markdown")
        elif next_state_on_success == AppStates.waiting_for_account_file:
            await message.answer(f"–ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.")
    else:
        await message.answer(f"–ü–∞–ø–∫–∞ '{folder_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# --- –û–¥–∏–Ω–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ---
@dp.message(F.text == "–û–¥–∏–Ω–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
async def handle_single_add_start(message: Message, state: FSMContext):
    await state.set_state(AppStates.choosing_folder_for_single)
    await show_folder_selection(message, state, AppStates.waiting_for_single_details)

@dp.message(AppStates.choosing_folder_for_single)
async def handle_folder_choice_for_single(message: Message, state: FSMContext):
    text = message.text
    if text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É":
        await state.set_state(AppStates.creating_new_folder_for_single)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    elif text and text.startswith("üìÅ "):
        folder_name = text.replace("üìÅ ", "")
        folders = await get_folders()
        folder = next((f for f in folders if f['name'] == folder_name), None)
        if folder:
            await state.update_data(folder_id=folder['id'])
            await state.set_state(AppStates.waiting_for_single_details)
            await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ '{folder_name}'. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n`login:password:email:email_password`", parse_mode="Markdown")
        else:
            await message.answer("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤":
        await handle_accounts(message, state)

@dp.message(AppStates.creating_new_folder_for_single)
async def handle_new_folder_for_single(message: Message, state: FSMContext):
    await process_new_folder_creation(message, state, AppStates.waiting_for_single_details)

@dp.message(AppStates.waiting_for_single_details)
async def handle_single_details(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    try:
        login, password, email, email_password = message.text.split(':')
        await state.update_data(login=login, password=password, email=email, email_password=email_password)
        await state.set_state(AppStates.waiting_for_single_proxy)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏: `http(s)/socks5://user:pass@ip:port`", parse_mode="Markdown")
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: `login:password:email:email_password`", parse_mode="Markdown")

@dp.message(AppStates.waiting_for_single_proxy)
async def handle_single_proxy(message: Message, state: FSMContext):
    proxy = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    use_proxy = proxy and proxy.lower() not in ['–Ω–µ—Ç', 'no', 'none']
    
    if use_proxy and isinstance(proxy, str) and not (proxy.startswith('http') or proxy.startswith('socks5')):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        return
    elif use_proxy and not isinstance(proxy, str):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Å–ª–æ–≤–æ '–Ω–µ—Ç'.")
        return

    user_data = await state.get_data()
    account_data = {
        **user_data, 
        "username": user_data['login'], 
        "proxy": proxy if use_proxy else None
    }
    
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é –≤—Ö–æ–¥ –¥–ª—è {account_data['username']}...")
    success, msg = await attempt_login_and_save(account_data)
    
    if success:
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ê–∫–∫–∞—É–Ω—Ç '{msg}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {msg}")
    
    await state.clear()
    await handle_accounts(message, state)

# --- –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ---
@dp.message(F.text == "–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
async def handle_bulk_add_start(message: Message, state: FSMContext):
    await state.set_state(AppStates.choosing_folder_for_bulk)
    await show_folder_selection(message, state, AppStates.waiting_for_account_file)

@dp.message(AppStates.choosing_folder_for_bulk)
async def handle_folder_choice_for_bulk(message: Message, state: FSMContext):
    text = message.text
    if text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É":
        await state.set_state(AppStates.creating_new_folder_for_bulk)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    elif text and text.startswith("üìÅ "):
        folder_name = text.replace("üìÅ ", "")
        folders = await get_folders()
        folder = next((f for f in folders if f['name'] == folder_name), None)
        if folder:
            await state.update_data(folder_id=folder['id'])
            await state.set_state(AppStates.waiting_for_account_file)
            await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ '{folder_name}'. –ü—Ä–∏—à–ª–∏—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.")
        else:
            await message.answer("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤":
        await handle_accounts(message, state)

@dp.message(AppStates.creating_new_folder_for_bulk)
async def handle_new_folder_for_bulk(message: Message, state: FSMContext):
    await process_new_folder_creation(message, state, AppStates.waiting_for_account_file)

@dp.message(AppStates.waiting_for_account_file, F.document)
async def handle_account_file(message: Message, state: FSMContext):
    if not message.document:
        return
    try:
        file = await bot.get_file(message.document.file_id)
        if not file.file_path:
            raise ValueError("File path is not available")
        
        file_bytes = await bot.download_file(file.file_path)
        if not file_bytes:
            raise ValueError("Could not download file")

        lines = file_bytes.read().decode('utf-8').splitlines()
        lines = [line.strip() for line in lines if line.strip()]
        if not lines:
            await message.answer("–§–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø—É—Å—Ç.")
            return
                
        _ = lines[0].split(':') # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        await state.update_data(account_lines=lines)
        await state.set_state(AppStates.waiting_for_proxy_file)
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω–æ {len(lines)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ TXT —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏.")
    except Exception as e:
        logger.error(f"Account file error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç `login:pass:mail:mail_pass` –≤–µ—Ä–Ω—ã–π.")

@dp.message(AppStates.waiting_for_proxy_file, F.document)
async def handle_proxy_file(message: Message, state: FSMContext):
    if not message.document:
        return
    try:
        file = await bot.get_file(message.document.file_id)
        if not file.file_path:
            raise ValueError("File path is not available")

        file_bytes = await bot.download_file(file.file_path)
        if not file_bytes:
            raise ValueError("Could not download file")
        
        proxy_lines = file_bytes.read().decode('utf-8').splitlines()
        proxy_lines = [line.strip() for line in proxy_lines if line.strip()]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏ –Ω—É–∂–Ω–æ
        user_data = await state.get_data()
        account_lines = user_data.get('account_lines', [])
        folder_id = user_data.get('folder_id')

        # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –±–æ–ª—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –æ–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
        if len(proxy_lines) > len(account_lines):
            logger.info(f"–ü—Ä–æ–∫—Å–∏ ({len(proxy_lines)}) –±–æ–ª—å—à–µ, —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({len(account_lines)}). –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(account_lines)} –ø—Ä–æ–∫—Å–∏.")
            proxy_lines = proxy_lines[:len(account_lines)]

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å ---
        await message.answer(
            f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(proxy_lines)} –ø—Ä–æ–∫—Å–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤)..."
        )
        total_proxies = len(proxy_lines)
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {total_proxies} –ø—Ä–æ–∫—Å–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")

        timeout_seconds = 30
        tasks = [
            asyncio.wait_for(check_proxy(proxy), timeout_seconds)
            for proxy in proxy_lines
        ]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        working_proxies = []
        for proxy, res in zip(proxy_lines, results):
            if isinstance(res, Exception):
                logger.warning(
                    f"–ü—Ä–æ–∫—Å–∏ {proxy[:40]}... –ù–ï –†–ê–ë–û–¢–ê–ï–¢. –ü—Ä–∏—á–∏–Ω–∞: {str(res)}"
                )
                continue

            is_ok, result = res
            if is_ok:
                working_proxies.append(result)
                logger.info(f"–ü—Ä–æ–∫—Å–∏ {result[:40]}... OK")
            else:
                logger.warning(
                    f"–ü—Ä–æ–∫—Å–∏ {proxy[:40]}... –ù–ï –†–ê–ë–û–¢–ê–ï–¢. –ü—Ä–∏—á–∏–Ω–∞: {result}"
                )

        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–±–æ—Ç–∞–µ—Ç: {len(working_proxies)}/{total_proxies}"
        )
        await message.answer(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}/{total_proxies}."
        )
        # --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

        if not working_proxies:
            await message.answer("–ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await state.clear()
            await handle_accounts(message, state)
            return

        if len(account_lines) > len(working_proxies):
            await message.answer(f"–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç–æ–≤ ({len(account_lines)}) –±–æ–ª—å—à–µ, —á–µ–º –†–ê–ë–û–ß–ò–• –ø—Ä–æ–∫—Å–∏ ({len(working_proxies)}).")
            await state.clear()
            await handle_accounts(message, state)
            return

        await message.answer(f"–ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(account_lines)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏...")
        report_lines = []
        total_accounts = len(account_lines)
        last_status = ""
        for i, acc_line in enumerate(account_lines):
            try:
                login, password, email, email_password = acc_line.split(':')
                
                status_line = f"({i + 1}/{total_accounts}) –í—Ö–æ–¥: {login}... {last_status}"
                print(status_line.ljust(120), end='\r', flush=True)

                account_data = {
                    "username": login, "password": password, "email": email,
                    "email_password": email_password, "proxy": working_proxies[i],
                    "folder_id": folder_id
                }
                success, msg = await attempt_login_and_save(account_data)
                
                if success:
                    last_status = ""
                else:
                    last_status = f"| –ü—Ä–µ–¥—ã–¥—É—â–∏–π ({login}): –ù–µ—É–¥–∞—á–∞"
                
                report_lines.append(f"[{'–£–°–ü–ï–•' if success else '–û–®–ò–ë–ö–ê'}] {login}: {msg}")
            except Exception as e:
                last_status = f"| –ü—Ä–µ–¥—ã–¥—É—â–∏–π ({acc_line.split(':')[0]}): –ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞"
                report_lines.append(f"[–ö–†–ò–¢. –û–®–ò–ë–ö–ê] –°—Ç—Ä–æ–∫–∞ '{acc_line[:15]}...': {e}")
        
        print("".ljust(120), end="\r", flush=True)
        logger.info("–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

        report_file = BufferedInputFile("\n".join(report_lines).encode('utf-8'), "login_report.txt")
        await message.answer_document(report_file, caption="–û—Ç—á–µ—Ç –æ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.")
    finally:
        await state.clear()
        await handle_accounts(message, state)


# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ ---
async def check_proxy(proxy: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (is_ok, result).
    –ï—Å–ª–∏ is_ok=True, result —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
    –ï—Å–ª–∏ is_ok=False, result —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏."""
    if not proxy:
        return False, "–Ω–µ—Ç"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π URI –ø—Ä–æ–≤–µ—Ä—è—Ç—å, socks5 –∏–ª–∏ http
    uri_to_check = proxy
    normalized_proxy = proxy
    if "socks5" not in proxy and "http" not in proxy:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º http
        normalized_proxy = f"http://{proxy}"
        uri_to_check = normalized_proxy
    
    try:
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get("https://httpbin.org/ip", proxy=uri_to_check) as response:
                if response.status == 200:
                    return True, normalized_proxy
                else:
                    return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status}"

    except (aiohttp.ClientHttpProxyError, aiohttp.ClientProxyConnectionError) as e:
        return False, str(e)
    except aiohttp.ClientConnectorError as e:
        # –ï—Å–ª–∏ http –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –ø—Ä–æ–±—É–µ–º socks5
        if "://" not in proxy:
            try:
                normalized_proxy = f"socks5://{proxy}"
                timeout = aiohttp.ClientTimeout(total=60)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get("https://httpbin.org/ip", proxy=normalized_proxy) as response:
                        if response.status == 200:
                            return True, normalized_proxy
                        else:
                            return False, f"SOCKS5: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status}"
            except Exception as socks_e:
                return False, str(socks_e)

        return False, str(e)
    except asyncio.TimeoutError:
        return False, "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    except Exception as e:
        return False, str(e)

# --- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞ ---
async def attempt_login_and_save(details: dict) -> tuple[bool, str]:
    cl = Client()
    cl.request_timeout = 90
    username = details.get("username", "")
    session_file = Path("sessions") / f"{username}.json"
    
    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è instagrapi ---
    proxy = details.get("proxy")
    if proxy and "socks5" in proxy:
        # instagrapi –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è socks5
        if not proxy.startswith("socks5h://"):
            proxy = proxy.replace("socks5://", "socks5h://")
    # ---

    try:
        if proxy:
            cl.set_proxy(proxy)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –º–æ—Ä–æ–∑–∏—Ç—å –±–æ—Ç–∞
        await asyncio.to_thread(cl.login, username, details.get("password", ""))
        await asyncio.to_thread(cl.dump_settings, session_file)
        
        added = await add_account(
            username=username,
            password=details.get("password", ""),
            email=details.get("email", ""),
            email_password=details.get("email_password", ""),
            proxy=details.get("proxy"), # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            folder_id=details.get("folder_id")
        )
        return (True, username) if added else (False, "–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
    except ChallengeRequired:
        logger.warning(f"Login failed for {username}: Challenge Required")
        return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (checkpoint)"
    except BadPassword:
        logger.warning(f"Login failed for {username}: Bad Password")
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
    except (ProxyError, ConnectionError, ReadTimeout, RequestException) as e:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏, –≤–∫–ª—é—á–∞—è ReadTimeout / ConnectTimeout
        logger.error(f"Login failed for {username} with network error: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    except UnknownError as e:
        logger.error(f"Login failed for {username} with unknown error: {e}")
        return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Instagram: {e}"
    except Exception as e:
        logger.error(f"Login failed for {username} with generic error: {e}")
        return False, str(e)

# --- –°–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ---
@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
async def handle_list_accounts(message: Message):
    accounts = await get_accounts()
    if not accounts:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç.")
        return
    
    acc_list = "\n".join([f"`{acc['id']}`: {acc['username']} (–ü–∞–ø–∫–∞: {acc.get('folder_id', 'N/A')})" for acc in accounts])
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n{acc_list}", parse_mode="Markdown")

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def handle_delete_start(message: Message, state: FSMContext):
    accounts = await get_accounts()
    if not accounts:
        await message.answer("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return
    
    buttons = [
        [KeyboardButton(text=f"{acc['id']}: {acc['username']}")] for acc in accounts
    ]
    buttons.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    
    await state.set_state(AppStates.choosing_account_to_delete)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(AppStates.choosing_account_to_delete)
async def handle_delete_choice(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await handle_accounts(message, state)
        return
    
    try:
        acc_id = int(message.text.split(':')[0])
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ db.py, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        # await delete_account(acc_id) 
        await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç ID {acc_id} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω (–ª–æ–≥–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
        await state.clear()
        await handle_accounts(message, state)
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.")


# --- Main ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
